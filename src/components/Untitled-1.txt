const reducer = (state = 0, action) => {
  switch (action.type) {
    case 'INC':
      return state + 1;

      default:
        return state;
  }
};

let state = reducer(undefined, {});

let state = reducer(state, { type: 'INC'});
console.log(state);
state = reducer(state, { type: 'INC' });
console.log(state);


//вызывается после каждого изменения
store.subscribe(() => {
  console.log(store.getState());
});

store.dispatch({type: 'INC'});
store.dispatch({type: 'INC'});


// const bindActionCreator = (creator, dispatch) => (...args) => {
//   dispatch(creator(...args));
// }
// const incDispatch = () => bindActionCreators(inc, dispatch);
// const decDispatch = () => bindActionCreators(dec, dispatch);
// const rndDispatch = (payload) => dbindActionCreators(rnd, dispatch);











import { createStore, bindActionCreators } from 'redux';
import reducer from './reducer';
import * as actions from './actions';

const store = createStore(reducer);
const { dispatch } = store;

const { inc, dec, rnd } = () => bindActionCreators(actions, dispatch);

// document.getElementById('inc').addEventListener('click', inc);
// document.getElementById('dec').addEventListener('click', dec);
// document.getElementById('rnd').addEventListener('click', rnd);

const update = () => {
  document.getElementById('counter').innerHTML = store.getState();
};

store.subscribe(update);




const update = () => {
  ReactDOM.render(<Counter
    counter={store.getState()}
    inc={inc}
    dec={dec}
    rnd={() => {
      const value = Math.floor(Math.random() * 10);
      rnd(value);
    }} />, document.getElementById('root'));
};
update();
store.subscribe(update);

